db.js ke aandar database se connect hone wala code hai
mongoose.connect()   // ek in built function hai
mongoose ki library me changes ho chuke hai aur ab mongoose callbacks ko accept nahi karta hai callbacks ki jagah async and await use karna hota hai

index.js 1 express server rahenga uska boiler plate direct copy paste karna hota hai
models folder me sare ke sare mongoose ke models rahenge

mongoose bolta hai ki tum tho apni application ko chalao baki jo data base ko manage karne ka kaam hai vo mongoose dek lenga
models ka first letter capital hona chahiye

module.exports = mongoose.model(model ka naam, schema ka naam)   isline ka matlab hota hai ki schema se model bana do

Express ke aandar router hota hai jisko hum 
const router = express.Router() kar ke import kar sagte hai

request kiya aur response me hello mila

jab bhi hume req.body ko use karna hoga tab hume 1 middle ware use karna hoga middleware use karne ke liye hume app.use ko use karna hoga


middle ware matlab app.use

password kabhi bhi plain text me store nahi karna hota hai

user.save() karke hum apne data ko store kar sagte hai

use router.post() for good security router.get me password dik sagta hai utna secure nahi hota hai
agat data bahot jyada hai tabh hi hum router.get ki jagah router.post use karte hai




abhi hum express validatorka use karenge
npm install --save express-validator

Jab bhi errors aayenge validation ke time tab 1 array return honga jisme ki sare errorr rahenge

Collection ka matlab ho hai ki hum ne 1 collection of end oints bana rahe hai jo ki 1 application se relation rakte hai

Authentication se releated jo bhi kaam honge vo isme aayenge

Video no. 48

password ko database me store nahi karte hai nahi tho hack ho jayenga

video number 49 

install bcrypt.js   for adding salt and papper
1 node,js package hai jiske him password ka salt generate kar sagte hais hash created kar sagte hai pass word ka bcrype promise ko return karta hai
hashSync function 1 blocking function hai par hum uski jagah await functon ka use karenge

const salt = bcrypt.genSalt(10);   isline se salt generate ho jayenga

bcrypt ka internal mechanism khud hi salt ko store(Adjust ) kar leta ha hume karne ki jarurat nahi hoti hai

bcrypt.hash kar ke pasword ko generate kar sagte hai

jab bhi koi login karenga hum usko return me 1 token denge

install jsonwebtoken 
jsonwebtoken 1 tarika hai verify karne ka 1 user ko

jab bhi koi user hamari website pe signup karenga tab hum usko in return 1 token denge aur jab bhi next time vo user website pe aake login karenga tab vo hum usko us token ki madat se identify arenge bar bar user apna user id and password nahi bhejenga tho hum usko token ki madat se identify karenge

signture ki madat se hum ye verify kar sagte hai ki user ne info ko change  tho nahi kiya kisi dusre ki info access karne k liye

jwt ki madat se hum client aur server ke beech bahot hi secure commmuncation establish kar sagte hai
jwt.sign 1 sync method hai


git hub

jab bhi passwords wagera ke saath deal karte hai tho GET ki jagah POST use karte hai

auth token ko decode karke usme se user id nikalenge

auth token me hum user aur id bhej rahe hai id token ke aandar present hai pahale se hi ab usko nikalna hai

Middle ware : middle ware 1 function hai jo ki call kiya jayenga jab bhi end points pe koi request aayengi

jin jin routes me middleware chahiye unke second argument me hume middle ware daalna hoga jabhi jake vo run honga

login require wale routes par koi bhi request aayengi tho middle ware ko call kiya jayenga
jin jin routes me middle ware chchiye honga jin ko hum 1 second argument de denge as a middle ware

fetchuser user ko fetch karenga

middleware 1 function hota hai jo ki req res aur next leta hai

jaha jaha login ki jarurat hai waha waha hum middle ware ko use karenge as a second argument
  authentication wale sare endpoints khatam kiye hai abhi
video number 52

express validator ko notes me isliye include kiya taki ye cheez validate ho ki agar notes khali ho tho vo save nahi ho

Video number 54

video number 55

backend ka node modules alag hai aur frontend ka node modules alaag jai

install npm i react-router-dom concurrently

cocurrently ki madat se hum 2 server simultaneouly chala sagte hai
2 server chala ne baad dono ko alag aloag host karenge aur dono aapas me communicate karenge

package.json ke aandar scripts ke aandar both wali line lik ne se dono server ek saath chal sagte hai

npm run both se dono chalenge